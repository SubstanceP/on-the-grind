{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-ignore\nimport React from 'react';\nimport Fade from '@material-ui/core/Fade';\nimport ReactImageMagnify from 'react-image-magnify';\nconst zoomDuration = 150;\n\nclass Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"updateWindowDimensions\", () => {\n      this.setState({\n        width: window.innerWidth\n      });\n    });\n\n    _defineProperty(this, \"swipeDisabled\", () => {\n      this.setState({\n        inMagnify: true\n      });\n      this.props.swipeDisabled();\n    });\n\n    _defineProperty(this, \"swipeTimer\", setTimeout(() => null, 0));\n\n    _defineProperty(this, \"touchStart\", () => {\n      this.swipeTimer = setTimeout(() => this.swipeDisabled(), zoomDuration);\n    });\n\n    _defineProperty(this, \"touchEnd\", () => {\n      clearTimeout(this.swipeTimer);\n      this.props.swipeEnabled();\n      this.setState({\n        inMagnify: false\n      });\n    });\n\n    this.state = {\n      width: 0,\n      inMagnify: false\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  getImageDimension() {\n    const {\n      width\n    } = this.state;\n\n    switch (true) {\n      // case width < 380:\n      //   return width;\n      case width < 600:\n        return width;\n\n      case width < 960:\n        return 450;\n\n      case width < 1280:\n        return 600;\n\n      case width < 1920:\n        return 700;\n\n      default:\n        return 800;\n    }\n  }\n\n  render() {\n    const {\n      article\n    } = this.props;\n    const width = this.getImageDimension();\n    let rootStyle = {\n      minHeight: this.getImageDimension() + 'px'\n    };\n\n    if (this.state.width < 600) {\n      rootStyle = {\n        minHeight: this.getImageDimension() + 'px'\n      };\n    }\n\n    const itemStyle = {\n      width: this.getImageDimension() + 'px'\n    };\n    const smallImage = {\n      alt: '',\n      width: width,\n      height: width,\n      src: article\n    };\n    const largeImage = {\n      src: article,\n      width: width * 1.7,\n      height: width * 1.7\n    };\n    const inMagnify = this.state.inMagnify && !this.props.fingerMoving;\n    return __jsx(\"div\", {\n      style: rootStyle\n    }, __jsx(Fade, {\n      in: true,\n      timeout: 400\n    }, __jsx(\"div\", {\n      onTouchStart: this.touchStart,\n      onTouchEnd: this.touchEnd,\n      onMouseEnter: this.touchStart,\n      onMouseLeave: this.touchEnd\n    }, inMagnify ? __jsx(ReactImageMagnify, {\n      imageStyle: {\n        display: 'none'\n      },\n      enlargedImagePosition: \"over\",\n      smallImage: smallImage,\n      largeImage: largeImage\n    }) : __jsx(ReactImageMagnify, {\n      pressDuration: zoomDuration,\n      imageStyle: itemStyle,\n      enlargedImagePosition: \"over\",\n      enlargedImageContainerDimensions: {\n        width: '60%',\n        height: '60%'\n      },\n      smallImage: smallImage,\n      largeImage: largeImage\n    }))));\n  }\n\n}\n\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}