{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Swipe from 'react-easy-swipe';\nimport { Hidden, Collapse } from '@material-ui/core';\nimport { Header, Item, Payment, Divider, Hint } from '../components';\nimport { DownArrow, hoodie, shirt, sweatshirt, landscape } from '../static';\nconst maxTouchScreenWidth = 1100;\nconst styles = {\n  root: {\n    // display: 'flex',\n    // alignItems: 'center',\n    // flexDirection: 'column',\n    // height: '100vh',\n    margin: '-8px'\n  },\n  hero: {},\n  content: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    position: 'relative',\n    width: '100%'\n  },\n  mobileContent: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: '20px',\n    position: 'absolute',\n    bottom: '0',\n    width: '100%'\n  },\n  downArrow: {\n    width: '4vw',\n    rot: '270'\n  },\n  rightArrow: {\n    width: '4vw',\n    transform: `rotate(270deg) `,\n    paddingRight: '15px'\n  },\n  leftArrow: {\n    width: '4vw',\n    transform: `rotate(90deg) `,\n    paddingLeft: '15px'\n  },\n  upArrow: {\n    width: '4vw',\n    transform: `rotate(180deg)`\n  },\n  paymentText: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buyNow: {\n    padding: '10px',\n    fontSize: '20px',\n    fontFamily: 'Comfortaa, sans-serif'\n  },\n  paymentPanel: {\n    backgroundColor: '#e8f6f7'\n  }\n};\nexport default class Shop extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"next\", () => {\n      if (this.state.swipeDisabled) {\n        return;\n      }\n\n      const {\n        items\n      } = this.state;\n      let {\n        itemIndex\n      } = this.state;\n\n      if (itemIndex >= items.length - 1) {\n        itemIndex = 0;\n      } else {\n        itemIndex++;\n      }\n\n      this.setState({\n        itemIndex\n      });\n    });\n\n    _defineProperty(this, \"last\", () => {\n      if (this.state.swipeDisabled) {\n        return;\n      }\n\n      const {\n        items\n      } = this.state;\n      let {\n        itemIndex\n      } = this.state;\n\n      if (itemIndex <= 0) {\n        itemIndex = items.length - 1;\n      } else {\n        itemIndex--;\n      }\n\n      this.setState({\n        itemIndex\n      });\n    });\n\n    _defineProperty(this, \"swipeDisabled\", () => {\n      this.setState({\n        swipeDisabled: true\n      });\n    });\n\n    _defineProperty(this, \"swipeEnabled\", () => {\n      this.setState({\n        swipeDisabled: false\n      });\n      this.setState({\n        fingerMoving: false\n      });\n    });\n\n    _defineProperty(this, \"onSwipeMove\", position => {\n      // finger moving tells mobile small item not to disappear when a finger\n      // is dragged slightly (since the magnified won't pop up in this case)\n      if (Math.abs(position.x) > 10 || Math.abs(position.y) > 10) {\n        this.setState({\n          fingerMoving: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"showPayment\", () => {\n      if (this.state.width < maxTouchScreenWidth) {\n        return;\n      }\n\n      this.setState({\n        showPayment: true\n      });\n    });\n\n    _defineProperty(this, \"hidePayment\", () => {\n      if (this.state.width < maxTouchScreenWidth) {\n        return;\n      }\n\n      this.setState({\n        showPayment: false\n      });\n    });\n\n    _defineProperty(this, \"togglePayment\", () => {\n      const {\n        showPayment\n      } = this.state;\n      this.setState({\n        showPayment: !showPayment\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    this.state = {\n      itemIndex: 0,\n      showPayment: false,\n      items: [shirt, sweatshirt, hoodie],\n      width: 0,\n      swipeDisabled: false,\n      fingerMoving: false,\n      modalOpen: true\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth\n    });\n  }\n\n  getHeroDimension() {\n    const {\n      width\n    } = this.state;\n\n    switch (true) {\n      case width < 600:\n        return width;\n\n      case width < 960:\n        return 450;\n\n      case width < 1280:\n        return 600;\n\n      case width < 1920:\n        return 700;\n\n      default:\n        return 800;\n    }\n  }\n\n  render() {\n    const {\n      items,\n      itemIndex,\n      showPayment,\n      modalOpen\n    } = this.state;\n    return __jsx(\"div\", {\n      style: styles.root\n    }, __jsx(Swipe, {\n      onSwipeLeft: this.next,\n      onSwipeRight: this.last,\n      onSwipeMove: this.onSwipeMove,\n      allowMouseEvents: false\n    }, __jsx(Head, null, __jsx(\"link\", {\n      href: \"https://fonts.googleapis.com/css?family=Comfortaa\",\n      rel: \"stylesheet\",\n      key: \"google-font-comfortaa\"\n    })), __jsx(Header, null), __jsx(\"img\", {\n      style: {\n        height: this.getHeroDimension() + 'px',\n        position: 'absolute',\n        opacity: 0.9,\n        objectFit: 'cover',\n        width: '100%'\n      },\n      src: landscape\n    }), __jsx(Hidden, {\n      smUp: true\n    }, __jsx(Hint, {\n      open: modalOpen,\n      handleClose: this.handleClose\n    })), __jsx(\"div\", {\n      style: styles.content\n    }, __jsx(Hidden, {\n      xsDown: true\n    }, __jsx(\"img\", {\n      src: DownArrow,\n      style: styles.leftArrow,\n      onClick: this.last\n    })), items.map((item, i) => i == itemIndex && __jsx(Item, {\n      fingerMoving: this.state.fingerMoving,\n      article: item,\n      swipeDisabled: this.swipeDisabled,\n      swipeEnabled: this.swipeEnabled\n    })), __jsx(Hidden, {\n      xsDown: true\n    }, __jsx(\"img\", {\n      src: DownArrow,\n      style: styles.rightArrow,\n      onClick: this.next\n    }))), __jsx(Divider, null), __jsx(\"div\", {\n      style: styles.paymentPanel,\n      onMouseLeave: this.hidePayment,\n      onMouseEnter: this.showPayment,\n      onClick: this.togglePayment\n    }, __jsx(\"div\", {\n      style: styles.paymentText\n    }, __jsx(\"span\", {\n      style: styles.buyNow\n    }, \"Buy \"), showPayment ? __jsx(\"img\", {\n      src: DownArrow,\n      style: styles.upArrow\n    }) : __jsx(\"img\", {\n      src: DownArrow,\n      style: styles.downArrow\n    }), __jsx(\"span\", {\n      style: styles.buyNow\n    }, \" Now\"))), __jsx(Collapse, {\n      in: showPayment\n    }, __jsx(Payment, {\n      hidePayment: this.hidePayment,\n      showPayment: this.showPayment\n    })), __jsx(Divider, null)));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}